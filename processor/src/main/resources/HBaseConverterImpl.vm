package ${tc.getPackageName()};

import com.coupang.pz.hbase.extension.HBaseConverter;
import com.coupang.pz.hbase.extension.scheme.HColumnDef;
import com.coupang.pz.hbase.extension.util.ByteUtils;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.apache.hadoop.hbase.client.Get;

import java.io.IOException;
import java.util.List;
import java.util.Map;

#set( $converterClassName = $tc.getRowName() + 'Converter')
public class $converterClassName extends HBaseConverter<$tc.getRowName(), $rc.getTypeName()> {
    private final List<HColumnDef> columns = initColumnDef();
    private final Map<String, List<Class>> typeArguments = initTypeArgumentMap();

    private static List<HColumnDef> initColumnDef() {
        List<HColumnDef> columns = Lists.newArrayList();
#foreach ($cc in $ccs)
        columns.add(new HColumnDef("${cc.getFamily()}", "${cc.getQualifier()}"));
#end
        return columns;
    }

    private static Map<String, List<Class>> initTypeArgumentMap() {
        Map<String, List<Class>> typeArgumentMap = Maps.newHashMap();
        List<Class> tas;
#foreach ($cc in $ccs)
        tas = Lists.newArrayList();
#foreach ($ta in $cc.getTypeArguments())
        tas.add(${ta}.class})
#end
        typeArgumentMap.put("$cc.getFamily()" + ":" + "$cc.getQualifier()", tas);
#end
        return typeArgumentMap;
    }

    @Override
    public Get toGet($rc.getTypeName() rowKey) throws JsonProcessingException {
        return new Get(ByteUtils.toBytes(rowKey));
    }

    @Override
    public String getTableName() {
        return "$tc.getTableName()";
    }

    @Override
    protected void applyColumn($tc.getRowName() row, String cf, String col, byte[] value) throws IOException {
#set ($isFirst = true)
#foreach( $cc in $ccs )
#if ($isFirst)
        if (cf.equals("$cc.getFamily()") && col.equals("$cc.getQualifier()")) {
#set ($isFirst = false)
#else
        else if (cf.equals("$cc.getFamily()") && col.equals("$cc.getQualifier()")) {
#end
            row.${cc.getSetterName()}(($cc.getTypeName())ByteUtils.fromBytes(
                value,
                ${cc.getDeclaredTypeName()}.class,
                typeArguments.get("$cc.getFamily()" + ":" + "$cc.getQualifier()")
            ));
        }
#end
    }

    @Override
    protected List<HColumnDef> getColumns() throws NoSuchFieldException {
        return columns;
    }

    @Override
    protected void applyRowKey($tc.getRowName() row, $rc.getTypeName() rowKey) {
        if (row == null) {
            return;
        }

        row.${rc.getSetterName()}(rowKey);
    }

    @Override
    protected $tc.getRowName() getRowInstance() {
        return new ${tc.getRowName()}();
    }
}